#ifndef __CASTORCORRFACTORPPB2013_H__
#define __CASTORCORRFACTORPPB2013_H__

namespace castor {
  // updated version from 5. July 2013

  const unsigned int CSectors = 16;
  const unsigned int CModules = 14;

  double absEscaleFactor = 1.49475628341732545e+02/3.38945322418397409e+04 * 7.82961248095532028e+02/1.33096168279108213e+02 * 1.45; //levs factor to hadron lvl (1.45) was based on the 0.025 from the fractions. in principle hardon lvl should not be used here

  //using for Katerina's value's (some correction values seem too big (for me big is all >3), some are zeros)
  const bool channelQuality[CSectors][CModules] =                                           // sector
  //mod 1   2     3     4     5      6    7     8     9    10     11    12   13    14
    {{true ,true ,true ,false,true ,true ,false,true ,true ,true ,true ,true ,true ,true }, // 1
     {true ,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,true ,true }, // 2
     {true ,true ,true ,true ,true ,true ,false,false,false,true ,false,true ,true ,true }, // 3 //s3m9 ?
     {true ,true ,true ,true ,true ,true ,false,false,false,true ,false,true ,false,true }, // 4
     {true ,false,true ,true ,true ,true ,false,false,false,true ,true ,true ,true ,true }, // 5
     {true ,true ,true ,true ,true ,true ,false,false,false,true ,true ,true ,true ,true }, // 6 //s6m9 ?
     {true ,true ,true ,true ,true ,true ,false,true ,true ,false,false,false,false,false}, // 7 //s7m10-14katerina?
     {true ,true ,true ,true ,true ,true ,false,false,true ,false,false,false,false,false}, // 8 //s8m10-14katerina?
     {true ,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,false,true }, // 9 //s9m13?
     {true ,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,true ,true }, // 10
     {true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,true ,true ,true }, // 11 //s11m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,true ,true ,true }, // 12 //s12m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,false,false,false,true ,true ,false,true ,true ,true }, // 13 //s13m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,true ,true ,true }, // 14 //s14m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,true ,false,false,true ,false,true ,true ,true ,true }, // 15
     {true ,true ,true ,true ,true ,false,false,true ,true ,true ,true ,true ,true ,true }};// 16

  // Katerina's values using halo muon data (w/o TOTEM), already scaled by s9m4
  const double channelGainQE[CSectors][CModules] =                                                                                                              // sector
    //mod 1          2          3          4           5          6          7         8          9          10         11          12        13           14
    {{  0.7510,    0.8700,    2.7370,    0.0000,    0.3630,    0.6430,    0.0000,    0.3100,    0.2120,    0.2740,    0.3030,    0.1690,    0.2650,    0.1550}, //1
     {  0.6190,    0.6160,    1.8130,    0.8690,    0.1820,    0.6280,    0.0000,    0.5070,    0.1680,    0.2910,    0.3380,    0.1460,    0.2490,    0.1250}, //2
     {  1.0700,    0.6510,    1.4250,    0.7660,    0.3040,    0.1930,    8.2170,   13.2900,    0.4650,    0.2350,    0.0000,    0.2950,    0.3430,    0.3510}, //3
     {  0.5310,    0.3300,    0.8910,    0.8260,    0.1170,    0.3300,    0.0000,    0.0000,    0.0000,    0.6390,    0.0000,    0.3170,    0.0000,    0.4580}, //4
     {  0.6120,    0.0000,    1.3410,    0.7020,    0.1560,    0.5690,    0.8360,    0.0000,    0.0000,    0.5230,    0.2360,    0.3290,    0.3990,    0.3420}, //5
     {  1.3130,    0.4870,    1.4000,    0.6320,    0.1990,    0.7950,    1.2090,    0.0000,    0.5100,    0.7060,    0.2330,    0.2800,    0.4830,    0.4410}, //6
     {  0.4160,    0.2820,    1.0430,    0.3130,    0.1140,    0.0860,  250.6690,    0.1950,    0.4200,    6.9160,    3.4790,    1.5110,    4.8590,    3.5340}, //7
     {  0.3420,    0.2950,    1.1980,    1.4030,    0.2130,    1.0730,    0.0000,    0.2060,    0.6350,   27.2690,    9.4210,    3.3400,    3.4880,    1.0100}, //8
     {  0.3030,    0.8460,    1.4120,    1.0000,    0.2180,    0.8830,    0.0000,    0.1320,    0.1950,    0.2490,    0.2250,    0.2270,    0.2990,    0.2780}, //9
     {  0.9040,    1.4030,    2.6580,    1.1900,    0.2350,    1.5570,    0.0000,    0.3160,    0.1990,    0.3100,    0.1790,    0.2510,    0.2510,    0.2520}, //10
     {  1.0160,    0.9930,    1.6950,    0.8870,    0.2850,    0.6230,    0.0000,   10.0790,    0.3730,    0.2440,    9.6350,    0.5240,    0.6990,    0.3790}, //11
     {  1.1690,    1.1300,    2.1400,    1.3920,    0.2630,    1.2470,    0.0000,    0.0000,    0.5670,    0.3030,   99.3510,    0.3510,    0.1980,    0.3560}, //12
     {  0.9160,    1.2700,    1.6430,    0.8070,    0.2310,    2.3020,    0.0000,    0.0000,    0.3230,    0.2910,    0.0000,    0.3430,    0.1280,    0.3080}, //13
     {  0.6010,    0.9840,    2.1400,    0.8210,    0.1770,    1.0970,    0.0000,    0.0000,    0.2030,    0.2920,   16.6350,    0.3020,    0.3510,    0.3680}, //14
     {  0.7590,    1.3650,    2.9620,    1.1740,    0.3800,    2.3370,    0.0000,  517.2540,    0.2690,    0.0000,    0.1940,    0.2740,    0.2800,    0.4100}, //15
     {  0.7420,    0.9720,    2.4600,    0.9240,    0.2200,    0.1630,    3.9070,    0.1970,    0.2700,    0.2580,    0.1510,    0.1340,    0.2790,    0.2620}};//16

  const double channelEMCorr[CSectors][CModules] =                                                                       // sector
  //mod 1      2       3       4       5       6       7       8       9       10      11      12      13      14
    {{ 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, //  1
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, //  2
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, //  3
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, //  4
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, //  5
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, //  6
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, //  7
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, //  8
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, //  9
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, // 10
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, // 11
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, // 12
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, // 13
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, // 14
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }, // 15
     { 0.5000, 0.5000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000 }};// 16


  const double channelPedMean[CSectors][CModules] =
    //mod 1    2       3       4       5       6       7       8       9       10      11      12      13      14         //sec
    {{ 13.164, 11.818, 11.405, 10.252, 11.668,  9.727, 11.334, 12.109, 11.418, 11.067, 11.463, 11.375, 13.664, 12.021 },  //1
     { 12.927, 10.713, 12.367, 12.210, 14.098, 11.329, 10.747, 11.717, 11.956, 11.651, 11.178, 12.748, 10.779, 10.935 },  //2
     { 12.439, 11.883, 10.533, 11.754, 11.475, 11.139, 11.165, 11.536, 12.008, 12.158, 13.279, 12.149, 12.521, 11.558 },  //3
     { 12.956, 12.082, 11.691, 12.453, 11.879, 11.376, 12.063, 10.858, 13.446, 13.642, 12.002, 11.295, 10.546, 11.400 },  //4
     { 11.682, 11.090, 12.457, 11.691, 11.414, 11.171, 11.435, 11.154, 11.584, 12.630, 12.269, 11.036, 11.582, 11.689 },  //5
     { 11.945, 12.068, 11.673, 14.228, 12.034, 12.378, 12.356, 11.555, 12.007, 11.607, 10.903, 12.102, 11.601, 11.125 },  //6
     { 11.095, 13.235, 11.917, 12.557, 10.415, 11.832, 10.779, 12.024, 13.148, 11.519, 11.774, 11.313, 12.031, 11.373 },  //7
     { 11.383, 11.177, 12.340, 11.026, 10.790, 11.718, 12.198,  6.543, 11.902, 12.199, 11.947, 12.073, 11.498, 12.816 },  //8
     { 10.354, 10.968, 11.653, 10.812, 12.058, 11.866, 11.918, 11.402, 11.013, 10.945, 11.186, 12.268, 12.197, 12.000 },  //9
     { 11.995, 11.715, 13.082, 10.762, 12.390, 11.696, 11.334, 11.694, 11.293, 11.194, 11.974, 11.963, 12.411, 12.714 },  //10
     { 11.936, 11.217, 10.790, 11.794, 12.440, 10.805, 12.989, 11.180, 12.114, 11.572, 12.460, 12.144, 11.796, 11.220 },  //11
     { 11.600, 12.607, 11.666, 12.547, 12.460, 11.585, 11.660, 11.698, 11.169, 12.516, 11.470, 12.570, 10.964, 11.412 },  //12
     { 12.642, 12.324, 12.446, 11.889, 12.181, 11.767, 11.337, 11.309, 10.777, 11.684, 12.249, 11.691, 11.028, 11.969 },  //13
     { 11.573, 12.919, 11.385, 10.960, 11.716, 10.411, 13.042, 12.091, 11.476, 10.515, 10.674, 10.926, 11.678, 11.505 },  //14
     { 12.502, 12.393, 12.878, 12.242, 11.464, 12.079, 13.072, 11.262, 11.677,  9.927, 11.590, 11.967, 13.227, 12.609 },  //15
     { 11.035, 11.379, 11.928, 10.838, 11.628, 12.663, 13.674, 12.668, 11.835, 12.042, 11.435, 11.514, 11.545, 12.699 }}; //16


  const double channelPedWidth[CSectors][CModules] =
    //mod 1    2       3       4       5       6       7       8       9       10      11      12      13      14         //sec
    {{ 11.710,  7.447,  8.703, 10.694,  7.971, 10.382,  9.340,  8.741, 12.880,  6.367,  7.372,  7.412,  9.313,  8.039 },  //1
     { 16.585,  6.899,  7.110,  6.449, 17.943, 10.881, 11.524,  8.254,  8.133,  7.419,  6.449,  7.286,  7.359,  8.236 },  //2
     { 17.280,  9.592,  8.867,  8.052, 11.892,  9.075,  7.329, 113.093,  7.391,  6.527,  8.237,  7.029,  8.004,  6.479 },  //3
     { 15.726,  6.984, 10.951,  7.941,  8.990,  7.949, 10.262,  7.138,  6.946,  6.700,  7.754,  7.248, 10.105,  6.801 },  //4
     {  8.131,  7.861,  8.446,  7.216,  9.105,  9.607,  9.520,  8.819,  8.854,  6.588,  8.229,  7.247,  7.740,  7.952 },  //5
     { 10.675,  7.749,  7.027,  6.478,  8.412,  8.533,  8.978,  8.049,  8.724,  7.091,  6.483,  6.511,  6.546,  7.112 },  //6
     {  7.016, 18.388,  6.907,  7.527,  6.201,  7.623, 12.035,  6.526, 10.364,  7.497,  6.733,  7.780, 19.549,  7.730 },  //7
     {  7.325,  6.768,  8.019,  8.984,  7.480,  6.511,  7.605,  7.968,  8.098,  8.926,  7.438,  6.458,  6.754,  6.878 },  //8
     {  6.396,  6.662,  6.528,  8.678,  7.015,  6.357,  7.085,  7.904,  6.595,  9.508,  7.946,  8.694,  6.476,  9.338 },  //9
     {  6.433,  7.643,  7.441,  8.008,  6.096,  6.054,  6.851,  6.744,  8.007,  7.286,  7.310,  8.096, 10.051, 14.265 },  //10
     { 13.157,  7.651, 10.370,  7.748,  8.354,  7.370,  9.255, 10.525,  8.516,  6.005,  7.160,  7.819, 10.833,  7.630 },  //11
     {  8.120,  7.670,  6.842,  8.336,  6.845,  7.638, 11.063,  8.551,  7.290,  6.809,  6.563, 11.840,  9.305,  6.054 },  //12
     { 11.046,  7.535,  7.387,  6.990,  6.667,  8.410,  6.481,  9.280,  6.748,  8.257,  9.394,  6.534,  6.479,  7.234 },  //13
     {  9.430,  7.592,  6.825,  7.291,  7.727,  8.334,  8.712, 11.206,  7.634,  6.817,  6.528,  6.999, 20.851,  7.854 },  //14
     {  7.705, 10.551, 10.214,  7.265,  7.614,  7.199,  7.845,  5.720,  6.486, 12.290,  7.515,  8.114,  9.345,  6.624 },  //15
     { 10.498,  8.566,  7.256,  6.799,  6.837, 44.130,  6.530,  6.591,  6.345,  6.428,  9.117,  9.438,  8.442,  8.200 }}; //16
}


#endif
